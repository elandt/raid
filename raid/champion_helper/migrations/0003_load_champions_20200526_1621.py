# Generated by Django 3.0.6 on 2020-05-26 21:21

from django.db import migrations

import csv
import os
from decimal import Decimal

from raid.settings import DATA_DIR


def location_as_str(location):
    """
    Modify location.name before displaying:
    Capitalize the first letter of each word in self.name
    Replace underscores in location.name with spaces
    """
    return " ".join((word.capitalize() for word in location.name.split("_")))


def get_key_by_value(dictionary, val):
    """
    Finds the key of a given value in the specified
    dictionary.
    """
    for key, value in dictionary.items():
        if val == value:
            return key
    raise ValueError(f"Value({val}) not found")


def load_champions(apps, schema_editor):
    """
    Iterates over the rows in the
    Raid_Shadow_Legends_Champions.csv to
    provide data for the Champions.
    This data includes the attributes of the
    Champions, and the ratings of the Champions.
    """
    Champions = apps.get_model("champion_helper", "Champion")
    Ratings = apps.get_model("champion_helper", "Rating")
    Factions = apps.get_model("champion_helper", "Faction")
    Locations = apps.get_model("champion_helper", "Location")
    Affinities = apps.get_model("champion_helper", "Affinity")

    # 
    AFFINITIES = dict((
        ("force", "Force"),
        ("magic", "Magic"),
        ("spirit", "Spirit"),
        ("void", "Void"),
    ))
    CHAMP_RARITIES = dict((
        ("c", "Common"),
        ("unc", "Uncommon"),
        ("rare", "Rare"),
        ("epic", "Epic"),
        ("legend", "Legendary"),
    ))
    CHAMP_TYPES = dict((
        ("attack", "Attack"),
        ("defense", "Defense"),
        ("hp", "HP"),
        ("support", "Support"),
    ))
    FACTIONS = dict((
        ("banner_lords", "Banner Lords"),
        ("high_elves", "High Elves"),
        ("sacred_order", "The Sacred Order"),
        ("barbarians", "Barbarians"),
        ("ogryn_tribes", "Ogryn Tribes"),
        ("lizardmen", "Lizardmen"),
        ("skinwalkers", "Skinwalkers"),
        ("orcs", "Orcs"),
        ("demonspawn", "Demonspawn"),
        ("undead_hordes", "Undead Hordes"),
        ("dark_elves", "Dark Elves"),
        ("knight_revenant", "Knight Revenant"),
        ("dwarves", "Dwarves"),
    ))
    POSSIBLE_RATINGS = dict(zip(
        (Decimal(x)/10 for x in range(0, 51)),
        (Decimal(x)/10 for x in range(0, 51))
    ))

    data_file = os.path.join(DATA_DIR, "Raid_Shadow_Legends_Champions.csv")
    with open(data_file, newline="") as initial_champs:
        reader = csv.DictReader(initial_champs)
        for row in reader:
            champ_name = row["Champion"]
            champ_type = row["Type"]
            champ_faction = row["Faction"]
            champ_rarity = row["Rarity"]
            champ_affinity = row["Affinity"]

            new_champ, champ_created = Champions.objects.get_or_create(
                name=champ_name,
                type=get_key_by_value(CHAMP_TYPES, champ_type),
                affinity=Affinities.objects.get(
                    name=get_key_by_value(AFFINITIES, champ_affinity)
                ),
                faction=Factions.objects.get(
                    name=get_key_by_value(FACTIONS, champ_faction)
                ),
                rarity=get_key_by_value(
                    CHAMP_RARITIES, champ_rarity
                )
            )
            new_champ.save()
            new_champ.refresh_from_db()
            # For each in-game location, add
            # the rating from the csv for the
            # champ being added
            for location in Locations.objects.all():
                rating = Decimal(
                    row[location_as_str(location)]
                )
                new_rating, rating_created = Ratings.objects.get_or_create(
                    champion=new_champ,
                    location=location,
                    value=get_key_by_value(
                        POSSIBLE_RATINGS, rating
                    )
                )
                new_rating.save()


class Migration(migrations.Migration):

    dependencies = [
        ('champion_helper', '0002_auto_20200526_1619'),
    ]

    operations = [
        migrations.RunPython(load_champions)
    ]
